"""
Django settings for qcon project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Secrets loader: prefer files in /etc/secrets/{name}, fall back to env vars
SECRETS_DIR = Path("/etc/secrets")

def get_secret(name: str, default: str = None, required: bool = False, subdirectory: str = None) -> str:
    """
    Load a secret from /etc/secrets/{name} if present, otherwise from environment.
    Strips trailing whitespace. If required and missing, raise an error.
    """
    base_dir = SECRETS_DIR / subdirectory if subdirectory else SECRETS_DIR
    file_path = base_dir / name
    if file_path.exists():
        val = file_path.read_text(encoding="utf-8").strip()
    else:
        val = os.getenv(name, default)

    if required and (val is None or val == ""):
        raise RuntimeError(
            f"Missing required secret: {name} (file {file_path} or env var {name})"
        )

    return val

API_HOST = os.getenv('API_HOST')
API_PORT = os.getenv('API_PORT')
API_KEY = get_secret('API_KEY', required=True)
APP_VERSION = os.getenv('APP_VERSION')
# IMAGE_TAG = os.getenv('IMAGE_TAG')
# IMAGE_TITLE = os.getenv('IMAGE_TITLE')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '33xu$zgkit5bq0o4fg8y00^ar)tt8#srvg^go$^m@z3l&sxti3'
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False) == 'true'

LOGGING_LEVEL = 'INFO'
POSTGRES_HOST = 'localhost'
if DEBUG:
    POSTGRES_HOST = 'postgresweb'
    LOGGING_LEVEL = 'DEBUG'

ALLOWED_HOSTS = ['*']

CSRF_USE_SESSIONS = True
CSRF_COOKIE_HTTPONLY = True

# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-Party Apps
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',

    # Local Apps
    'frontend.apps.FrontendConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'qconweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'frontend/build'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'qconweb.wsgi.application'
# Channels
ASGI_APPLICATION = 'qconweb.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_secret("POSTGRES_DB", subdirectory='db-credentials', required=True),
        'USER': get_secret("POSTGRES_USER", subdirectory='db-credentials', required=True),
        'PASSWORD': get_secret("POSTGRES_PASSWORD", subdirectory='db-credentials', required=True),
        'HOST': POSTGRES_HOST,
        'PORT': 5432,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/html/static/'

STATICFILES_DIRS = [
    "/code/frontend/build/static",
    "/code/frontend/build"
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'temp/')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format':
            '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'custom': {
            'format':
            '{levelname} {asctime} {module} {name} {funcName} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOGGING_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'custom'
        },
        'console_dev': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'dev.log',
            'formatter': 'custom',
            'maxBytes': 1024 * 1024 * 10,  # 10 mb
            'filters': ['require_debug_true']
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'frontend': {
            'handlers': ['console','console_dev'],
            'level': LOGGING_LEVEL,
            'propagate': False,
        }
    },
}

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = True